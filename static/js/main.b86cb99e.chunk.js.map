{"version":3,"sources":["../../reactcalculator/src/App.js","../../reactcalculator/src/serviceWorker.js","../../reactcalculator/src/index.js"],"names":["ColorBox","console","log","this","props","react_default","a","createElement","style","background","color","className","text","React","Component","InputText","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","changedInput","bind","assertThisInitialized","event","setState","target","value","fontSize","type","onChange","App_ColorBox","item","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAIMA,0LAME,OAFAC,QAAQC,IAAI,UAAUC,KAAKC,OAC3BH,QAAQC,IAAIC,KAAKC,OAEbC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,WAAWN,KAAKC,MAAMM,OAAQC,UAAU,YAChDR,KAAKC,MAAMQ,aARLC,IAAMC,YA6CdC,cA5BX,SAAAA,EAAYX,GAAM,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAY,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlB,KAAMC,KACDkB,MAAQ,CACTV,KAAM,GACNF,MAAO,IAGXM,EAAKO,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAPNA,4EAWLU,GACTvB,KAAKwB,SAAS,CAACf,KAAKc,EAAME,OAAOC,MAAQnB,MAAOgB,EAAME,OAAOC,yCAI7D,OACIxB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WACXN,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEsB,SAAU,KAAtB,wCACAzB,EAAAC,EAAAC,cAAA,SAAOI,UAAU,aAAaoB,KAAK,OAAOC,SAAU7B,KAAKoB,eACzDlB,EAAAC,EAAAC,cAAC0B,EAAD,CAAUrB,KAAQT,KAAKmB,MAAMV,KAAMF,MAAOP,KAAKmB,MAAMZ,MAAOwB,KAAM/B,KAAKmB,gBAxB/DT,IAAMC,WCNVqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b86cb99e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nclass ColorBox extends React.Component {\n    /* Shows a box with a color and text passed via props.\n    */\n    render() {\n        console.log(\"Props: \"+this.props);\n        console.log(this.props)\n        return (\n            <div style={{background:this.props.color}} className=\"colorBox\">\n                {this.props.text}\n            </div>\n        );\n    }\n}\n\nclass InputText extends React.Component {\n    /* Takes text input and sends it to ColorBox component.\n    */\n    constructor(props){\n        super(props);\n        this.state = {\n            text: '',\n            color: '',\n        };\n        // binding the function.\n        this.changedInput = this.changedInput.bind(this);\n    }\n\n    // To be called each time when input text changes.\n    changedInput(event) {\n        this.setState({text:event.target.value , color: event.target.value});\n    }\n\n    render() {\n        return (\n            <div className=\"content\">\n                <h3>Type any color name or Hex code</h3>\n                <p style={{ fontSize: 13}}>e.g. green, pink, lightblue, #404040</p>\n                <input className=\"input-text\" type=\"text\" onChange={this.changedInput} />\n                <ColorBox text = {this.state.text} color={this.state.color} item={this.state} />\n            </div>\n        );\n    }\n\n}\n\nexport default InputText;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}